//
//  ScrapBookPopup.swift
//  WildTales
//
//  Created by Yujie Wei on 18/4/2025.
//
//  The popup page containing image carousel
//  Use the code from the following content
//  Reference https://stackoverflow.com/questions/56760335/how-to-round-specific-corners-of-a-view
//  Function processSelectedImage is derived from google gemini with prompt "for this page, we want to allow user to select photo from album, and then display the image in the Carousel.". The other parts of code like variables and CarouselView are also modified according to this function

import SwiftUI

struct ScrapBookPopup: View {

    let didClose: () -> Void
    @State private var currentImageList: [ImageItem] = sampleImageList

    @State private var currentIndex: Int = 0

    @State private var showImagePickerSheet = false
    @State private var newlySelectedUIImage: UIImage? = nil

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                
                VStack(spacing: 0) {
                    Header(
                        closeAction: didClose,
                        addPhotoAction: {
                            self.newlySelectedUIImage = nil
                            self.showImagePickerSheet = true
                        }
                    )
                    .padding(.bottom, 20)

                   
                    CarouselView(carouselImages: currentImageList, currentIndex: $currentIndex)
                         .frame(height: geometry.size.height * 0.7)

                    Spacer()
                }
                .background(Color.white)
                .cornerRadius(30, corners: [.topLeft, .topRight])
                .padding(.top, 80)
            }
        }
        .sheet(isPresented: $showImagePickerSheet, onDismiss: processSelectedImage) {
            ImagePicker(selectedImage: $newlySelectedUIImage)
        }
        .transition(.move(edge: .bottom))
        
    }

    // Function which processes the selected image, generated by AI
    private func processSelectedImage() {
        guard let selectedImage = newlySelectedUIImage else {
            print("No image selected or picker cancelled.")
            return
        }

        let newTitle = "New Memory \(currentImageList.count + 1)"
        let newDescription = "A beautiful moment captured."

        let newImageItem = ImageItem(
            uiImage: selectedImage,
            locationTitle: newTitle,
            description: newDescription
        )

        currentImageList.append(newImageItem)

        if !currentImageList.isEmpty {
            currentIndex = currentImageList.count - 1
        }
       
        self.newlySelectedUIImage = nil
    }
    // End AI assisted coding
}

struct Header: View {
    var closeAction: () -> Void
    var addPhotoAction: () -> Void

    var body: some View {
        ZStack {
            VStack {
                Text("Memories")
                    .font(.title)
                    .foregroundColor(Color(.green1))
                
                Text("Look back at all your adventures")
                    .font(.subheadline)
                    .foregroundColor(Color.gray)
            }
            .padding(.top, 10)
            
            HStack {
                Button {
                    closeAction()
                    AudioManager.playSound(soundName: "boing.wav", soundVol: 0.5)
                } label: {
                    
                    Image("exitButton")
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(height: 35)
                }

                Spacer()

                Button {
                    addPhotoAction()
                } label: {
                    Image(systemName: "plus.circle.fill")
                        .font(.system(size: 30))
                        .foregroundColor(Color(.green1))
                }
            }
        }
        .padding(.horizontal, 25)
        .frame(height: 60)
    }
}


struct CarouselView: View {
    let carouselImages: [ImageItem]
    @Binding var currentIndex: Int

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                TabView(selection: $currentIndex) {
                    ForEach(carouselImages.indices, id: \.self) { index in
                        CardView(memory: carouselImages[index])
                            .padding(.horizontal, 25)
                            .frame(width: geometry.size.width)
                            .tag(index)
                    }
                }
                .tabViewStyle(.page(indexDisplayMode: .never))
                

                HStack {
                    Button {
                        withAnimation { currentIndex = max(0, currentIndex - 1) }
                        AudioManager.playSound(
                            soundName: "boing.wav",
                            soundVol: 0.5)
                    } label: {
                        Image("back_button")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 40, height: 40)
                            .padding(.leading, -1)
                        
                    }
                    .disabled(currentIndex == 0)
                    .padding(.leading, 5)

                    Spacer()

                    Button {
                        withAnimation { currentIndex = min(carouselImages.count - 1, currentIndex + 1) }
                        AudioManager.playSound(
                            soundName: "boing.wav",
                            soundVol: 0.5)
                    } label: {
                        
                        Image("forward_button")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 40, height: 40)
                            .padding(.trailing, -1)
                    }
                    .disabled(currentIndex >= carouselImages.count - 1)
                    .padding(.trailing, 5)
                }
                // adjust vertical position of arrow buttons relative to the area
                .padding(.top, geometry.size.height * 0.3)

            }
            .frame(height: geometry.size.height)
        }
    }
}

struct CardView: View {
    let memory: ImageItem

    var body: some View {
        VStack(spacing: 15) {
            // Title
            Text(memory.locationTitle)
                .font(.title2)
                .fontWeight(.semibold)
                .foregroundColor(.black)
                .padding(.top, 10)
            
            // Photo
            ZStack {
                memory.displayImage
                    .resizable()
                    .aspectRatio(contentMode: .fill)
                    .frame(maxHeight: 300)
                    .clipped()
                    .cornerRadius(8)
            }
            .frame(maxHeight: 300)
            .aspectRatio(4/3, contentMode: .fit)

            Text("\"\(memory.description)\"")
                .font(Font.custom("Inter", size: 16))
                .foregroundColor(.gray)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding(.vertical, 15)
        .padding(.horizontal, 10)
        .background(Color.white)
        .cornerRadius(20)
        .shadow(color: Color.black.opacity(0.3), radius: 10, x: 0, y: 4)
    }
}

// Change the corner radius
// Reference for the following functions
// https://stackoverflow.com/questions/56760335/how-to-round-specific-corners-of-a-view
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners
    
    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        return Path(path.cgPath)
    }
}

struct ScrapBookPopup_Previews: PreviewProvider {
    static var previews: some View {
        
        ScrapBookPopup(didClose: {})
            .previewLayout(.sizeThatFits)
            .padding()
            .background(Color.gray.opacity(0.3))
    }
}


