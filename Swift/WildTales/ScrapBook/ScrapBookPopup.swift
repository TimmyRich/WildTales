//
//  ScrapBookPopup.swift
//  WildTales
//
//  Created by Yujie Wei on 18/4/2025.
//
//  The popup page presenting image gallery, it also allows user to select photo from album to display. The newly added photos will be saved to ImageStore
//  Use the code from the following content
//  Reference https://stackoverflow.com/questions/56760335/how-to-round-specific-corners-of-a-view
//  Function processSelectedImage is derived from google gemini with prompt "for this page, we want to allow user to select photo from album, and then display the image in the Carousel.". The other parts of code like variables and CarouselView are also modified according to this function

import SwiftUI

struct ScrapBookPopup: View {
    // called to close the popup in the guide page
    let didClose: () -> Void
    
    // initialized by loading image from ImageStore
    @State private var currentImageList: [ImageItem] = ImageStore.shared.loadImages()
    
    // The index of images in the carousel
    @State private var currentIndex: Int = 0
    
    // Controls showing the ImagePicker sheet
    @State private var showImagePickerSheet = false
    
    // Hold the image selected by ImagePicker
    @State private var newlySelectedUIImage: UIImage? = nil

    var body: some View {
        GeometryReader { geometry in
            ZStack {

                VStack(spacing: 0) {
                    Header(
                        closeAction: didClose,
                        addPhotoAction: {
                            // clean the previous image
                            self.newlySelectedUIImage = nil
                            // show ImagePicker view
                            self.showImagePickerSheet = true
                        }
                    )
                    .padding(.top, 20)

                    CarouselView(
                        carouselImages: currentImageList,
                        currentIndex: $currentIndex
                    )
                    // set the height of image gallery to 70% of the whole popup page
                    .frame(height: geometry.size.height * 0.7)

                    Spacer()
                }
                .background(Color.white)
                .cornerRadius(30, corners: [.topLeft, .topRight])
                // change the height of pop up page
                .padding(.top, UIScreen.main.bounds.width * 0.17)
            }
        }
        // call processSelectedImage function when ImagePicker is dimissed
        .sheet(
            isPresented: $showImagePickerSheet,
            onDismiss: processSelectedImage
        ) {
            ImagePicker(selectedImage: $newlySelectedUIImage)
        }
        .transition(.move(edge: .bottom))

    }

    // Function which processes the selected image, generated by AI with prompt 
    private func processSelectedImage() {
        // ensure image is successfully selected
        guard let selectedImage = newlySelectedUIImage else {
            print("No image selected")
            return
        }

        let newTitle = "New Memory \(currentImageList.count + 1)"
        let newDescription = "A beautiful moment captured."
        
        // Create the new ImageItem
        let newImageItem = ImageItem(
            uiImage: selectedImage,
            locationTitle: newTitle,
            description: newDescription
        )
        
        // Append new item to the image list and save the update to the persistent storage
        currentImageList.append(newImageItem)
        ImageStore.shared.saveImages(currentImageList)

        if !currentImageList.isEmpty {
            currentIndex = currentImageList.count - 1
        }

        self.newlySelectedUIImage = nil
    }
    // End AI assisted coding
}

struct Header: View {
    var closeAction: () -> Void
    var addPhotoAction: () -> Void

    var body: some View {
        ZStack {
            VStack {
                Text("Memories")
                    .font(.title)
                    .foregroundColor(Color(.green1))

                Text("Look back at all your adventures")
                    .font(.subheadline)
                    .foregroundColor(Color.gray)
            }
            .padding(.top, 10)

            HStack {
                Button {
                    closeAction()
                    AudioManager.playSound(
                        soundName: "boing.wav",
                        soundVol: 0.5
                    )
                } label: {

                    Image("exitButton")
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(height: 35)
                }

                Spacer()

                Button {
                    AudioManager.playSound(
                        soundName: "boing.wav",
                        soundVol: 0.5
                    )
                    addPhotoAction()
                } label: {
                    Image(systemName: "plus.circle.fill")
                        .font(.system(size: 30))
                        .foregroundColor(Color(.green1))
                }
            }
        }
        .padding(.horizontal, 25)
        .frame(height: 60)
    }
}

struct CarouselView: View {
    let carouselImages: [ImageItem]
    // A binding to the current image index
    @Binding var currentIndex: Int

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // Iterate over carouselImages and display images
                TabView(selection: $currentIndex) {
                    ForEach(carouselImages.indices, id: \.self) { index in
                        CardView(memory: carouselImages[index])
                            .padding(.horizontal, 25)
                            // Card has full width
                            .frame(width: geometry.size.width)
                            .tag(index)
                    }
                }
                .tabViewStyle(.page(indexDisplayMode: .never))
                
                // left and right arrow buttons
                HStack {
                    Button {
                        withAnimation {
                            currentIndex = max(0, currentIndex - 1)
                        }
                        AudioManager.playSound(
                            soundName: "boing.wav",
                            soundVol: 0.5
                        )
                    } label: {
                        Image("back_button")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 40, height: 40)
                            .padding(.leading, -1)

                    }
                    // ensure the index scope
                    .disabled(currentIndex == 0)
                    .padding(.leading, 5)

                    Spacer()

                    Button {
                        withAnimation {
                            currentIndex = min(
                                carouselImages.count - 1,
                                currentIndex + 1
                            )
                        }
                        AudioManager.playSound(
                            soundName: "boing.wav",
                            soundVol: 0.5
                        )
                    } label: {

                        Image("forward_button")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 40, height: 40)
                            .padding(.trailing, -1)
                    }
                    // ensure the index scope
                    .disabled(currentIndex >= carouselImages.count - 1)
                    .padding(.trailing, 5)
                }
                // adjust vertical position of arrow buttons relative to the area
                .padding(.top, geometry.size.height * 0.3)

            }
            .frame(height: geometry.size.height)
        }
    }
}

struct CardView: View {
    let memory: ImageItem

    var body: some View {
        VStack(spacing: 15) {
            
            // Title
            Text(memory.locationTitle)
                .font(.title2)
                .fontWeight(.semibold)
                .foregroundColor(.black)
                .padding(.top, 10)

            // Photo
            ZStack {
                memory.displayImage
                    .resizable()
                    .aspectRatio(contentMode: .fill)
                    .frame(maxHeight: 300)
                    .clipped()
                    .cornerRadius(8)
            }
            .frame(maxHeight: 300)
            // 4:3 is a common aspect ratio for photos
            .aspectRatio(4 / 3, contentMode: .fit)
            
            // Description
            Text("\"\(memory.description)\"")
                .font(Font.custom("Inter", size: 16))
                .foregroundColor(.gray)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding(.vertical, 15)
        .padding(.horizontal, 10)
        .background(Color.white)
        .cornerRadius(20)
        // Add shadow effect to card
        .shadow(color: Color.black.opacity(0.3), radius: 10, x: 0, y: 4)
    }
}

// Change the corner radius
// Reference for the following functions
// https://stackoverflow.com/questions/56760335/how-to-round-specific-corners-of-a-view
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: CGSize(width: radius, height: radius)
        )
        return Path(path.cgPath)
    }
}

struct ScrapBookPopup_Previews: PreviewProvider {
    static var previews: some View {

        ScrapBookPopup(didClose: {})
            .previewLayout(.sizeThatFits)
            .padding()
            .background(Color.gray.opacity(0.3))
    }
}
